[gd_scene load_steps=9 format=3 uid="uid://buoa4rfr48kmo"]

[ext_resource type="AudioStream" uid="uid://cvc6l3tdxbw7e" path="res://sound/walking.mp3" id="2_eehtu"]
[ext_resource type="Material" uid="uid://eu6lh0fr601x" path="res://addons/compass/resources/compassbar.material" id="2_p5dl0"]
[ext_resource type="AudioStream" uid="uid://bl3cwf1hh27at" path="res://sound/swimming.mp3" id="3_0p1ua"]
[ext_resource type="Texture2D" uid="uid://bg5fxjgjk8nfg" path="res://addons/compass/resources/compassbar.png" id="3_euwl0"]
[ext_resource type="Script" path="res://addons/compass/entities/compassbar.gd" id="4_pd2dw"]

[sub_resource type="GDScript" id="GDScript_368w3"]
script/source = "extends CharacterBody3D

@export var warp_location = Vector3(0,2,0)
@export var min_y : int = -20

@onready var neck = $Neck
@onready var main_cam = $Neck/Camera3D as Camera3D
@onready var secondary_cam = $Neck/Camera3D2 as Camera3D
var is_main_camera_active = true
var active_cam = main_cam




var speed = Settings.player_speed
var sens = Settings.mouse_sensitivity

const JUMP_VELOCITY = 4.5

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting(\"physics/3d/default_gravity\")

# Specify if being observed
var observed = null
var talking = false

func switch_camera():
	is_main_camera_active = !is_main_camera_active
	main_cam.current = is_main_camera_active
	secondary_cam.current = !is_main_camera_active
	active_cam = main_cam if is_main_camera_active else secondary_cam


# set up mouse handling
func _unhandled_input(event):
	if active_cam == null:
		active_cam = main_cam
	if event.is_action_pressed(\"switch_camera\"):
		switch_camera()
	if event is InputEventMouseButton and not talking:
		Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	if event.is_action_pressed(\"ui_cancel\"):
		Input.mouse_mode = Input.MOUSE_MODE_VISIBLE
		Settings.current_scene = get_parent().scene_file_path
		Settings.pos_x = global_position.x
		Settings.pos_y = global_position.y
		Settings.velocity_y = velocity.y
		Settings.facing_x = active_cam.rotation.x
		Settings.facing_y = neck.rotation.y
		SceneSwitcher.switch_scene(\"res://levels/GUI/pausescreen/pause_screen.tscn\")
	if Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED:
		if event is InputEventMouseMotion:
			neck.rotate_y(-event.relative.x * 0.01)
			active_cam.rotate_x(-event.relative.y * 0.01)
			active_cam.rotation.x = clamp(active_cam.rotation.x, deg_to_rad(-60), deg_to_rad(90))

	#if event.is_action_pressed(\"interact\"):
		## check for what we are interacting with
		#
		#print(SqlController.get_item_data(1))

func _physics_process(delta):
	if GameState.map_active:
		return
	else:
		# Add the gravity.
		if not is_on_floor():
			velocity.y -= gravity * delta

		# Handle jump.
		if Input.is_action_just_pressed(\"jump\") and is_on_floor():
			velocity.y = JUMP_VELOCITY

	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var input_dir = Input.get_vector(\"left\", \"right\", \"forward\", \"back\")
	
	var direction = (neck.transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
	

	if direction:
		velocity.x = direction.x * speed
		velocity.z = direction.z * speed
	else:
		velocity.x = move_toward(velocity.x, 0, speed)
		velocity.z = move_toward(velocity.z, 0, speed)

	if Settings.current_scene == \"res://levels/GUI/pausescreen/pause_screen.tscn\":
		Settings.current_scene = scene_file_path
		global_position.x = Settings.pos_x
		global_position.y = Settings.pos_y 
		velocity.y = Settings.velocity_y
		active_cam.global_rotation.x = Settings.facing_x
		neck.global_rotation.y = Settings.facing_y

	if global_position.y < min_y:
		global_position = warp_location

	move_and_slide()

func _process(_delta):
	var coll = %RayCast3D.get_collider()
	var coll2 = %RayCast3D2.get_collider()
	if is_main_camera_active:
		if coll != observed:
			if coll != null:
				print(coll.get_parent().item.name)
			if observed != null :	
				pass
			observed = coll
	else:
		observed = null
		if coll2 != observed:
			if coll2 != null:
				print(coll2.get_parent().item.name)
			if observed != null :	
				pass
			observed = coll2
	
func player():
	pass
"

[sub_resource type="CapsuleMesh" id="CapsuleMesh_gg2rt"]
radius = 0.4
height = 1.73

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_fyyq7"]
radius = 0.4
height = 1.73

[node name="Player" type="CharacterBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 2.08165e-12, 0.865, 2.08165e-12)
collision_layer = 2
collision_mask = 61
up_direction = Vector3(2.40653e-12, 1, 2.40653e-12)
script = SubResource("GDScript_368w3")

[node name="PlayerMesh" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 2.08165e-12, 2.08165e-12, 2.08165e-12)
mesh = SubResource("CapsuleMesh_gg2rt")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 2.08165e-12, 2.08165e-12, 2.08165e-12)
shape = SubResource("CapsuleShape3D_fyyq7")

[node name="Neck" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 2.08165e-12, 0.5, 2.08165e-12)

[node name="Camera3D" type="Camera3D" parent="Neck"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 2.08165e-12, 0, 2.08165e-12)

[node name="CenterContainer" type="CenterContainer" parent="Neck/Camera3D"]
anchors_preset = 5
anchor_left = 0.5
anchor_right = 0.5
offset_left = -87.0
offset_top = 58.0
offset_right = 9.0
offset_bottom = 81.0
grow_horizontal = 2
scale = Vector2(2, 2)

[node name="Pointer" type="Polygon2D" parent="Neck/Camera3D/CenterContainer"]
modulate = Color(0.0784314, 0.0784314, 0.0784314, 1)
position = Vector2(48.5, -3)
color = Color(0.14902, 0.14902, 0.14902, 1)
polygon = PackedVector2Array(0, 0, -3, -4, 3, -4)

[node name="CompassBar" type="TextureRect" parent="Neck/Camera3D/CenterContainer" node_paths=PackedStringArray("parent")]
texture_filter = 1
texture_repeat = 2
material = ExtResource("2_p5dl0")
layout_mode = 2
texture = ExtResource("3_euwl0")
stretch_mode = 3
script = ExtResource("4_pd2dw")
parent = NodePath("../../..")

[node name="RayCast3D" type="RayCast3D" parent="Neck/Camera3D"]
unique_name_in_owner = true
target_position = Vector3(2.08165e-12, 2.08165e-12, -3)
collision_mask = 12

[node name="Camera3D2" type="Camera3D" parent="Neck"]
transform = Transform3D(1, 0, 0, 0, 0.749395, 0.662123, 0, -0.662123, 0.749395, 2.08165e-12, 7.28922, 6.69717)

[node name="RayCast3D2" type="RayCast3D" parent="Neck/Camera3D2"]
unique_name_in_owner = true
target_position = Vector3(2.08165e-12, 2.08165e-12, -3)
collision_mask = 12

[node name="MovementSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource("2_eehtu")
volume_db = 1.231

[node name="SwimmingSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource("3_0p1ua")
